# source: http://localhost:4466
# timestamp: Thu Mar 21 2019 22:38:57 GMT+0800 (Taipei Standard Time)

type AggregateChunk {
  count: Int!
}

type AggregatePlayer {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWorld {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Chunk implements Node {
  id: ID!
  world: World!
  blocks: String!
  coordx: Int!
  coordz: Int!
}

"""A connection to a list of items."""
type ChunkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChunkEdge]!
  aggregate: AggregateChunk!
}

input ChunkCreateInput {
  blocks: String!
  coordx: Int!
  coordz: Int!
  world: WorldCreateOneInput!
}

input ChunkCreateManyInput {
  create: [ChunkCreateInput!]
  connect: [ChunkWhereUniqueInput!]
}

"""An edge in a connection."""
type ChunkEdge {
  """The item at the end of the edge."""
  node: Chunk!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChunkOrderByInput {
  id_ASC
  id_DESC
  blocks_ASC
  blocks_DESC
  coordx_ASC
  coordx_DESC
  coordz_ASC
  coordz_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChunkPreviousValues {
  id: ID!
  blocks: String!
  coordx: Int!
  coordz: Int!
}

input ChunkScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ChunkScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChunkScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChunkScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  blocks: String

  """All values that are not equal to given value."""
  blocks_not: String

  """All values that are contained in given list."""
  blocks_in: [String!]

  """All values that are not contained in given list."""
  blocks_not_in: [String!]

  """All values less than the given value."""
  blocks_lt: String

  """All values less than or equal the given value."""
  blocks_lte: String

  """All values greater than the given value."""
  blocks_gt: String

  """All values greater than or equal the given value."""
  blocks_gte: String

  """All values containing the given string."""
  blocks_contains: String

  """All values not containing the given string."""
  blocks_not_contains: String

  """All values starting with the given string."""
  blocks_starts_with: String

  """All values not starting with the given string."""
  blocks_not_starts_with: String

  """All values ending with the given string."""
  blocks_ends_with: String

  """All values not ending with the given string."""
  blocks_not_ends_with: String
  coordx: Int

  """All values that are not equal to given value."""
  coordx_not: Int

  """All values that are contained in given list."""
  coordx_in: [Int!]

  """All values that are not contained in given list."""
  coordx_not_in: [Int!]

  """All values less than the given value."""
  coordx_lt: Int

  """All values less than or equal the given value."""
  coordx_lte: Int

  """All values greater than the given value."""
  coordx_gt: Int

  """All values greater than or equal the given value."""
  coordx_gte: Int
  coordz: Int

  """All values that are not equal to given value."""
  coordz_not: Int

  """All values that are contained in given list."""
  coordz_in: [Int!]

  """All values that are not contained in given list."""
  coordz_not_in: [Int!]

  """All values less than the given value."""
  coordz_lt: Int

  """All values less than or equal the given value."""
  coordz_lte: Int

  """All values greater than the given value."""
  coordz_gt: Int

  """All values greater than or equal the given value."""
  coordz_gte: Int
}

type ChunkSubscriptionPayload {
  mutation: MutationType!
  node: Chunk
  updatedFields: [String!]
  previousValues: ChunkPreviousValues
}

input ChunkSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChunkSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChunkSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChunkSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChunkWhereInput
}

input ChunkUpdateDataInput {
  blocks: String
  coordx: Int
  coordz: Int
  world: WorldUpdateOneRequiredInput
}

input ChunkUpdateInput {
  blocks: String
  coordx: Int
  coordz: Int
  world: WorldUpdateOneRequiredInput
}

input ChunkUpdateManyDataInput {
  blocks: String
  coordx: Int
  coordz: Int
}

input ChunkUpdateManyInput {
  create: [ChunkCreateInput!]
  connect: [ChunkWhereUniqueInput!]
  set: [ChunkWhereUniqueInput!]
  disconnect: [ChunkWhereUniqueInput!]
  delete: [ChunkWhereUniqueInput!]
  update: [ChunkUpdateWithWhereUniqueNestedInput!]
  updateMany: [ChunkUpdateManyWithWhereNestedInput!]
  deleteMany: [ChunkScalarWhereInput!]
  upsert: [ChunkUpsertWithWhereUniqueNestedInput!]
}

input ChunkUpdateManyMutationInput {
  blocks: String
  coordx: Int
  coordz: Int
}

input ChunkUpdateManyWithWhereNestedInput {
  where: ChunkScalarWhereInput!
  data: ChunkUpdateManyDataInput!
}

input ChunkUpdateWithWhereUniqueNestedInput {
  where: ChunkWhereUniqueInput!
  data: ChunkUpdateDataInput!
}

input ChunkUpsertWithWhereUniqueNestedInput {
  where: ChunkWhereUniqueInput!
  update: ChunkUpdateDataInput!
  create: ChunkCreateInput!
}

input ChunkWhereInput {
  """Logical AND on all given filters."""
  AND: [ChunkWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChunkWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChunkWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  blocks: String

  """All values that are not equal to given value."""
  blocks_not: String

  """All values that are contained in given list."""
  blocks_in: [String!]

  """All values that are not contained in given list."""
  blocks_not_in: [String!]

  """All values less than the given value."""
  blocks_lt: String

  """All values less than or equal the given value."""
  blocks_lte: String

  """All values greater than the given value."""
  blocks_gt: String

  """All values greater than or equal the given value."""
  blocks_gte: String

  """All values containing the given string."""
  blocks_contains: String

  """All values not containing the given string."""
  blocks_not_contains: String

  """All values starting with the given string."""
  blocks_starts_with: String

  """All values not starting with the given string."""
  blocks_not_starts_with: String

  """All values ending with the given string."""
  blocks_ends_with: String

  """All values not ending with the given string."""
  blocks_not_ends_with: String
  coordx: Int

  """All values that are not equal to given value."""
  coordx_not: Int

  """All values that are contained in given list."""
  coordx_in: [Int!]

  """All values that are not contained in given list."""
  coordx_not_in: [Int!]

  """All values less than the given value."""
  coordx_lt: Int

  """All values less than or equal the given value."""
  coordx_lte: Int

  """All values greater than the given value."""
  coordx_gt: Int

  """All values greater than or equal the given value."""
  coordx_gte: Int
  coordz: Int

  """All values that are not equal to given value."""
  coordz_not: Int

  """All values that are contained in given list."""
  coordz_in: [Int!]

  """All values that are not contained in given list."""
  coordz_not_in: [Int!]

  """All values less than the given value."""
  coordz_lt: Int

  """All values less than or equal the given value."""
  coordz_lte: Int

  """All values greater than the given value."""
  coordz_gt: Int

  """All values greater than or equal the given value."""
  coordz_gte: Int
  world: WorldWhereInput
}

input ChunkWhereUniqueInput {
  id: ID
}

scalar DateTime

enum Gamemode {
  SURVIVAL
  CREATIVE
  ADVENTURE
  SPECTATOR
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createPlayer(data: PlayerCreateInput!): Player!
  createChunk(data: ChunkCreateInput!): Chunk!
  createUser(data: UserCreateInput!): User!
  createWorld(data: WorldCreateInput!): World!
  updatePlayer(data: PlayerUpdateInput!, where: PlayerWhereUniqueInput!): Player
  updateChunk(data: ChunkUpdateInput!, where: ChunkWhereUniqueInput!): Chunk
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateWorld(data: WorldUpdateInput!, where: WorldWhereUniqueInput!): World
  deletePlayer(where: PlayerWhereUniqueInput!): Player
  deleteChunk(where: ChunkWhereUniqueInput!): Chunk
  deleteUser(where: UserWhereUniqueInput!): User
  deleteWorld(where: WorldWhereUniqueInput!): World
  upsertPlayer(where: PlayerWhereUniqueInput!, create: PlayerCreateInput!, update: PlayerUpdateInput!): Player!
  upsertChunk(where: ChunkWhereUniqueInput!, create: ChunkCreateInput!, update: ChunkUpdateInput!): Chunk!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertWorld(where: WorldWhereUniqueInput!, create: WorldCreateInput!, update: WorldUpdateInput!): World!
  updateManyPlayers(data: PlayerUpdateManyMutationInput!, where: PlayerWhereInput): BatchPayload!
  updateManyChunks(data: ChunkUpdateManyMutationInput!, where: ChunkWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyWorlds(data: WorldUpdateManyMutationInput!, where: WorldWhereInput): BatchPayload!
  deleteManyPlayers(where: PlayerWhereInput): BatchPayload!
  deleteManyChunks(where: ChunkWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyWorlds(where: WorldWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Player implements Node {
  id: ID!
  isAdmin: Boolean!
  gamemode: Gamemode!
  user: User!
  world: World!
  lastLogin: DateTime
  x: Float!
  y: Float!
  z: Float!
  dirx: Float!
  diry: Float!
  loadedChunks: String!
}

"""A connection to a list of items."""
type PlayerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PlayerEdge]!
  aggregate: AggregatePlayer!
}

input PlayerCreateInput {
  isAdmin: Boolean!
  gamemode: Gamemode!
  lastLogin: DateTime
  x: Float!
  y: Float!
  z: Float!
  dirx: Float!
  diry: Float!
  loadedChunks: String!
  user: UserCreateOneInput!
  world: WorldCreateOneWithoutPlayersInput!
}

input PlayerCreateManyWithoutWorldInput {
  create: [PlayerCreateWithoutWorldInput!]
  connect: [PlayerWhereUniqueInput!]
}

input PlayerCreateWithoutWorldInput {
  isAdmin: Boolean!
  gamemode: Gamemode!
  lastLogin: DateTime
  x: Float!
  y: Float!
  z: Float!
  dirx: Float!
  diry: Float!
  loadedChunks: String!
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type PlayerEdge {
  """The item at the end of the edge."""
  node: Player!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PlayerOrderByInput {
  id_ASC
  id_DESC
  isAdmin_ASC
  isAdmin_DESC
  gamemode_ASC
  gamemode_DESC
  lastLogin_ASC
  lastLogin_DESC
  x_ASC
  x_DESC
  y_ASC
  y_DESC
  z_ASC
  z_DESC
  dirx_ASC
  dirx_DESC
  diry_ASC
  diry_DESC
  loadedChunks_ASC
  loadedChunks_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PlayerPreviousValues {
  id: ID!
  isAdmin: Boolean!
  gamemode: Gamemode!
  lastLogin: DateTime
  x: Float!
  y: Float!
  z: Float!
  dirx: Float!
  diry: Float!
  loadedChunks: String!
}

input PlayerScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PlayerScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlayerScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlayerScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isAdmin: Boolean

  """All values that are not equal to given value."""
  isAdmin_not: Boolean
  gamemode: Gamemode

  """All values that are not equal to given value."""
  gamemode_not: Gamemode

  """All values that are contained in given list."""
  gamemode_in: [Gamemode!]

  """All values that are not contained in given list."""
  gamemode_not_in: [Gamemode!]
  lastLogin: DateTime

  """All values that are not equal to given value."""
  lastLogin_not: DateTime

  """All values that are contained in given list."""
  lastLogin_in: [DateTime!]

  """All values that are not contained in given list."""
  lastLogin_not_in: [DateTime!]

  """All values less than the given value."""
  lastLogin_lt: DateTime

  """All values less than or equal the given value."""
  lastLogin_lte: DateTime

  """All values greater than the given value."""
  lastLogin_gt: DateTime

  """All values greater than or equal the given value."""
  lastLogin_gte: DateTime
  x: Float

  """All values that are not equal to given value."""
  x_not: Float

  """All values that are contained in given list."""
  x_in: [Float!]

  """All values that are not contained in given list."""
  x_not_in: [Float!]

  """All values less than the given value."""
  x_lt: Float

  """All values less than or equal the given value."""
  x_lte: Float

  """All values greater than the given value."""
  x_gt: Float

  """All values greater than or equal the given value."""
  x_gte: Float
  y: Float

  """All values that are not equal to given value."""
  y_not: Float

  """All values that are contained in given list."""
  y_in: [Float!]

  """All values that are not contained in given list."""
  y_not_in: [Float!]

  """All values less than the given value."""
  y_lt: Float

  """All values less than or equal the given value."""
  y_lte: Float

  """All values greater than the given value."""
  y_gt: Float

  """All values greater than or equal the given value."""
  y_gte: Float
  z: Float

  """All values that are not equal to given value."""
  z_not: Float

  """All values that are contained in given list."""
  z_in: [Float!]

  """All values that are not contained in given list."""
  z_not_in: [Float!]

  """All values less than the given value."""
  z_lt: Float

  """All values less than or equal the given value."""
  z_lte: Float

  """All values greater than the given value."""
  z_gt: Float

  """All values greater than or equal the given value."""
  z_gte: Float
  dirx: Float

  """All values that are not equal to given value."""
  dirx_not: Float

  """All values that are contained in given list."""
  dirx_in: [Float!]

  """All values that are not contained in given list."""
  dirx_not_in: [Float!]

  """All values less than the given value."""
  dirx_lt: Float

  """All values less than or equal the given value."""
  dirx_lte: Float

  """All values greater than the given value."""
  dirx_gt: Float

  """All values greater than or equal the given value."""
  dirx_gte: Float
  diry: Float

  """All values that are not equal to given value."""
  diry_not: Float

  """All values that are contained in given list."""
  diry_in: [Float!]

  """All values that are not contained in given list."""
  diry_not_in: [Float!]

  """All values less than the given value."""
  diry_lt: Float

  """All values less than or equal the given value."""
  diry_lte: Float

  """All values greater than the given value."""
  diry_gt: Float

  """All values greater than or equal the given value."""
  diry_gte: Float
  loadedChunks: String

  """All values that are not equal to given value."""
  loadedChunks_not: String

  """All values that are contained in given list."""
  loadedChunks_in: [String!]

  """All values that are not contained in given list."""
  loadedChunks_not_in: [String!]

  """All values less than the given value."""
  loadedChunks_lt: String

  """All values less than or equal the given value."""
  loadedChunks_lte: String

  """All values greater than the given value."""
  loadedChunks_gt: String

  """All values greater than or equal the given value."""
  loadedChunks_gte: String

  """All values containing the given string."""
  loadedChunks_contains: String

  """All values not containing the given string."""
  loadedChunks_not_contains: String

  """All values starting with the given string."""
  loadedChunks_starts_with: String

  """All values not starting with the given string."""
  loadedChunks_not_starts_with: String

  """All values ending with the given string."""
  loadedChunks_ends_with: String

  """All values not ending with the given string."""
  loadedChunks_not_ends_with: String
}

type PlayerSubscriptionPayload {
  mutation: MutationType!
  node: Player
  updatedFields: [String!]
  previousValues: PlayerPreviousValues
}

input PlayerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PlayerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlayerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlayerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PlayerWhereInput
}

input PlayerUpdateInput {
  isAdmin: Boolean
  gamemode: Gamemode
  lastLogin: DateTime
  x: Float
  y: Float
  z: Float
  dirx: Float
  diry: Float
  loadedChunks: String
  user: UserUpdateOneRequiredInput
  world: WorldUpdateOneRequiredWithoutPlayersInput
}

input PlayerUpdateManyDataInput {
  isAdmin: Boolean
  gamemode: Gamemode
  lastLogin: DateTime
  x: Float
  y: Float
  z: Float
  dirx: Float
  diry: Float
  loadedChunks: String
}

input PlayerUpdateManyMutationInput {
  isAdmin: Boolean
  gamemode: Gamemode
  lastLogin: DateTime
  x: Float
  y: Float
  z: Float
  dirx: Float
  diry: Float
  loadedChunks: String
}

input PlayerUpdateManyWithoutWorldInput {
  create: [PlayerCreateWithoutWorldInput!]
  connect: [PlayerWhereUniqueInput!]
  set: [PlayerWhereUniqueInput!]
  disconnect: [PlayerWhereUniqueInput!]
  delete: [PlayerWhereUniqueInput!]
  update: [PlayerUpdateWithWhereUniqueWithoutWorldInput!]
  updateMany: [PlayerUpdateManyWithWhereNestedInput!]
  deleteMany: [PlayerScalarWhereInput!]
  upsert: [PlayerUpsertWithWhereUniqueWithoutWorldInput!]
}

input PlayerUpdateManyWithWhereNestedInput {
  where: PlayerScalarWhereInput!
  data: PlayerUpdateManyDataInput!
}

input PlayerUpdateWithoutWorldDataInput {
  isAdmin: Boolean
  gamemode: Gamemode
  lastLogin: DateTime
  x: Float
  y: Float
  z: Float
  dirx: Float
  diry: Float
  loadedChunks: String
  user: UserUpdateOneRequiredInput
}

input PlayerUpdateWithWhereUniqueWithoutWorldInput {
  where: PlayerWhereUniqueInput!
  data: PlayerUpdateWithoutWorldDataInput!
}

input PlayerUpsertWithWhereUniqueWithoutWorldInput {
  where: PlayerWhereUniqueInput!
  update: PlayerUpdateWithoutWorldDataInput!
  create: PlayerCreateWithoutWorldInput!
}

input PlayerWhereInput {
  """Logical AND on all given filters."""
  AND: [PlayerWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlayerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlayerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isAdmin: Boolean

  """All values that are not equal to given value."""
  isAdmin_not: Boolean
  gamemode: Gamemode

  """All values that are not equal to given value."""
  gamemode_not: Gamemode

  """All values that are contained in given list."""
  gamemode_in: [Gamemode!]

  """All values that are not contained in given list."""
  gamemode_not_in: [Gamemode!]
  lastLogin: DateTime

  """All values that are not equal to given value."""
  lastLogin_not: DateTime

  """All values that are contained in given list."""
  lastLogin_in: [DateTime!]

  """All values that are not contained in given list."""
  lastLogin_not_in: [DateTime!]

  """All values less than the given value."""
  lastLogin_lt: DateTime

  """All values less than or equal the given value."""
  lastLogin_lte: DateTime

  """All values greater than the given value."""
  lastLogin_gt: DateTime

  """All values greater than or equal the given value."""
  lastLogin_gte: DateTime
  x: Float

  """All values that are not equal to given value."""
  x_not: Float

  """All values that are contained in given list."""
  x_in: [Float!]

  """All values that are not contained in given list."""
  x_not_in: [Float!]

  """All values less than the given value."""
  x_lt: Float

  """All values less than or equal the given value."""
  x_lte: Float

  """All values greater than the given value."""
  x_gt: Float

  """All values greater than or equal the given value."""
  x_gte: Float
  y: Float

  """All values that are not equal to given value."""
  y_not: Float

  """All values that are contained in given list."""
  y_in: [Float!]

  """All values that are not contained in given list."""
  y_not_in: [Float!]

  """All values less than the given value."""
  y_lt: Float

  """All values less than or equal the given value."""
  y_lte: Float

  """All values greater than the given value."""
  y_gt: Float

  """All values greater than or equal the given value."""
  y_gte: Float
  z: Float

  """All values that are not equal to given value."""
  z_not: Float

  """All values that are contained in given list."""
  z_in: [Float!]

  """All values that are not contained in given list."""
  z_not_in: [Float!]

  """All values less than the given value."""
  z_lt: Float

  """All values less than or equal the given value."""
  z_lte: Float

  """All values greater than the given value."""
  z_gt: Float

  """All values greater than or equal the given value."""
  z_gte: Float
  dirx: Float

  """All values that are not equal to given value."""
  dirx_not: Float

  """All values that are contained in given list."""
  dirx_in: [Float!]

  """All values that are not contained in given list."""
  dirx_not_in: [Float!]

  """All values less than the given value."""
  dirx_lt: Float

  """All values less than or equal the given value."""
  dirx_lte: Float

  """All values greater than the given value."""
  dirx_gt: Float

  """All values greater than or equal the given value."""
  dirx_gte: Float
  diry: Float

  """All values that are not equal to given value."""
  diry_not: Float

  """All values that are contained in given list."""
  diry_in: [Float!]

  """All values that are not contained in given list."""
  diry_not_in: [Float!]

  """All values less than the given value."""
  diry_lt: Float

  """All values less than or equal the given value."""
  diry_lte: Float

  """All values greater than the given value."""
  diry_gt: Float

  """All values greater than or equal the given value."""
  diry_gte: Float
  loadedChunks: String

  """All values that are not equal to given value."""
  loadedChunks_not: String

  """All values that are contained in given list."""
  loadedChunks_in: [String!]

  """All values that are not contained in given list."""
  loadedChunks_not_in: [String!]

  """All values less than the given value."""
  loadedChunks_lt: String

  """All values less than or equal the given value."""
  loadedChunks_lte: String

  """All values greater than the given value."""
  loadedChunks_gt: String

  """All values greater than or equal the given value."""
  loadedChunks_gte: String

  """All values containing the given string."""
  loadedChunks_contains: String

  """All values not containing the given string."""
  loadedChunks_not_contains: String

  """All values starting with the given string."""
  loadedChunks_starts_with: String

  """All values not starting with the given string."""
  loadedChunks_not_starts_with: String

  """All values ending with the given string."""
  loadedChunks_ends_with: String

  """All values not ending with the given string."""
  loadedChunks_not_ends_with: String
  user: UserWhereInput
  world: WorldWhereInput
}

input PlayerWhereUniqueInput {
  id: ID
}

enum PrismaDatabase {
  default
}

type Query {
  players(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Player]!
  chunks(where: ChunkWhereInput, orderBy: ChunkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chunk]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  worlds(where: WorldWhereInput, orderBy: WorldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [World]!
  player(where: PlayerWhereUniqueInput!): Player
  chunk(where: ChunkWhereUniqueInput!): Chunk
  user(where: UserWhereUniqueInput!): User
  world(where: WorldWhereUniqueInput!): World
  playersConnection(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlayerConnection!
  chunksConnection(where: ChunkWhereInput, orderBy: ChunkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChunkConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  worldsConnection(where: WorldWhereInput, orderBy: WorldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorldConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  player(where: PlayerSubscriptionWhereInput): PlayerSubscriptionPayload
  chunk(where: ChunkSubscriptionWhereInput): ChunkSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  world(where: WorldSubscriptionWhereInput): WorldSubscriptionPayload
}

type User implements Node {
  id: ID!
  username: String!
  email: String!
  password: String!
  worlds(where: WorldWhereInput, orderBy: WorldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [World!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  email: String!
  password: String!
  worlds: WorldCreateManyInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  email: String!
  password: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  username: String
  email: String
  password: String
  worlds: WorldUpdateManyInput
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  worlds: WorldUpdateManyInput
}

input UserUpdateManyMutationInput {
  username: String
  email: String
  password: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  worlds_every: WorldWhereInput
  worlds_some: WorldWhereInput
  worlds_none: WorldWhereInput
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}

type World implements Node {
  id: ID!
  name: String!
  seed: String!
  chunks(where: ChunkWhereInput, orderBy: ChunkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chunk!]
  players(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Player!]
}

"""A connection to a list of items."""
type WorldConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorldEdge]!
  aggregate: AggregateWorld!
}

input WorldCreateInput {
  name: String!
  seed: String!
  chunks: ChunkCreateManyInput
  players: PlayerCreateManyWithoutWorldInput
}

input WorldCreateManyInput {
  create: [WorldCreateInput!]
  connect: [WorldWhereUniqueInput!]
}

input WorldCreateOneInput {
  create: WorldCreateInput
  connect: WorldWhereUniqueInput
}

input WorldCreateOneWithoutPlayersInput {
  create: WorldCreateWithoutPlayersInput
  connect: WorldWhereUniqueInput
}

input WorldCreateWithoutPlayersInput {
  name: String!
  seed: String!
  chunks: ChunkCreateManyInput
}

"""An edge in a connection."""
type WorldEdge {
  """The item at the end of the edge."""
  node: World!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WorldOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  seed_ASC
  seed_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorldPreviousValues {
  id: ID!
  name: String!
  seed: String!
}

input WorldScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [WorldScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [WorldScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WorldScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  seed: String

  """All values that are not equal to given value."""
  seed_not: String

  """All values that are contained in given list."""
  seed_in: [String!]

  """All values that are not contained in given list."""
  seed_not_in: [String!]

  """All values less than the given value."""
  seed_lt: String

  """All values less than or equal the given value."""
  seed_lte: String

  """All values greater than the given value."""
  seed_gt: String

  """All values greater than or equal the given value."""
  seed_gte: String

  """All values containing the given string."""
  seed_contains: String

  """All values not containing the given string."""
  seed_not_contains: String

  """All values starting with the given string."""
  seed_starts_with: String

  """All values not starting with the given string."""
  seed_not_starts_with: String

  """All values ending with the given string."""
  seed_ends_with: String

  """All values not ending with the given string."""
  seed_not_ends_with: String
}

type WorldSubscriptionPayload {
  mutation: MutationType!
  node: World
  updatedFields: [String!]
  previousValues: WorldPreviousValues
}

input WorldSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WorldSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WorldSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WorldSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WorldWhereInput
}

input WorldUpdateDataInput {
  name: String
  seed: String
  chunks: ChunkUpdateManyInput
  players: PlayerUpdateManyWithoutWorldInput
}

input WorldUpdateInput {
  name: String
  seed: String
  chunks: ChunkUpdateManyInput
  players: PlayerUpdateManyWithoutWorldInput
}

input WorldUpdateManyDataInput {
  name: String
  seed: String
}

input WorldUpdateManyInput {
  create: [WorldCreateInput!]
  connect: [WorldWhereUniqueInput!]
  set: [WorldWhereUniqueInput!]
  disconnect: [WorldWhereUniqueInput!]
  delete: [WorldWhereUniqueInput!]
  update: [WorldUpdateWithWhereUniqueNestedInput!]
  updateMany: [WorldUpdateManyWithWhereNestedInput!]
  deleteMany: [WorldScalarWhereInput!]
  upsert: [WorldUpsertWithWhereUniqueNestedInput!]
}

input WorldUpdateManyMutationInput {
  name: String
  seed: String
}

input WorldUpdateManyWithWhereNestedInput {
  where: WorldScalarWhereInput!
  data: WorldUpdateManyDataInput!
}

input WorldUpdateOneRequiredInput {
  create: WorldCreateInput
  connect: WorldWhereUniqueInput
  update: WorldUpdateDataInput
  upsert: WorldUpsertNestedInput
}

input WorldUpdateOneRequiredWithoutPlayersInput {
  create: WorldCreateWithoutPlayersInput
  connect: WorldWhereUniqueInput
  update: WorldUpdateWithoutPlayersDataInput
  upsert: WorldUpsertWithoutPlayersInput
}

input WorldUpdateWithoutPlayersDataInput {
  name: String
  seed: String
  chunks: ChunkUpdateManyInput
}

input WorldUpdateWithWhereUniqueNestedInput {
  where: WorldWhereUniqueInput!
  data: WorldUpdateDataInput!
}

input WorldUpsertNestedInput {
  update: WorldUpdateDataInput!
  create: WorldCreateInput!
}

input WorldUpsertWithoutPlayersInput {
  update: WorldUpdateWithoutPlayersDataInput!
  create: WorldCreateWithoutPlayersInput!
}

input WorldUpsertWithWhereUniqueNestedInput {
  where: WorldWhereUniqueInput!
  update: WorldUpdateDataInput!
  create: WorldCreateInput!
}

input WorldWhereInput {
  """Logical AND on all given filters."""
  AND: [WorldWhereInput!]

  """Logical OR on all given filters."""
  OR: [WorldWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WorldWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  seed: String

  """All values that are not equal to given value."""
  seed_not: String

  """All values that are contained in given list."""
  seed_in: [String!]

  """All values that are not contained in given list."""
  seed_not_in: [String!]

  """All values less than the given value."""
  seed_lt: String

  """All values less than or equal the given value."""
  seed_lte: String

  """All values greater than the given value."""
  seed_gt: String

  """All values greater than or equal the given value."""
  seed_gte: String

  """All values containing the given string."""
  seed_contains: String

  """All values not containing the given string."""
  seed_not_contains: String

  """All values starting with the given string."""
  seed_starts_with: String

  """All values not starting with the given string."""
  seed_not_starts_with: String

  """All values ending with the given string."""
  seed_ends_with: String

  """All values not ending with the given string."""
  seed_not_ends_with: String
  chunks_every: ChunkWhereInput
  chunks_some: ChunkWhereInput
  chunks_none: ChunkWhereInput
  players_every: PlayerWhereInput
  players_some: PlayerWhereInput
  players_none: PlayerWhereInput
}

input WorldWhereUniqueInput {
  id: ID
}
