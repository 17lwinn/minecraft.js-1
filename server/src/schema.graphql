type Query {
	users(query: String, first: Int, skip: Int, after: String): [User!]!
	me: User!
	myWorlds(first: Int, skip: Int, after: String): [World!]!
	world(query: String!): World!
}

type Mutation {
	# USER
	createUser(data: CreateUserInput!): AuthPayload!
	login(data: LoginUserInput!): AuthPayload!
	deleteUser: User!
	updateUser(data: UpdateUserInput!): User!

	# WORLD
	createWorld(data: CreateWorldInput!): World!
	updatePlayer(data: UpdatePlayerInput!): Player!
}

type User {
	id: ID!
	username: String!
	email: String!
	password: String!
	updatedAt: String!
	createdAt: String!
}

type World {
	id: ID!
	name: String!
	seed: String!
	chunks: [Chunk!]!
	players: [Player!]!
}

type Player {
	id: ID!
	isAdmin: Boolean!
	gamemode: String!
	user: User!
	lastLogin: String
	x: Float!
	y: Float!
	z: Float!
}

type Chunk {
	id: ID!
	blocks: String!
	coordx: Int!
	coordz: Int!
}

input CreateUserInput {
	email: String!
	password: String!
	username: String!
}

input LoginUserInput {
	email: String!
	password: String!
}

input UpdateUserInput {
	username: String
	email: String
	password: String
}

input CreateWorldInput {
	name: String!
	seed: String!
	gamemode: Gamemode!
}

input UpdatePlayerInput {
	id: ID!
	x: Float!
	y: Float!
	z: Float!
}

type AuthPayload {
	token: String!
	user: User!
}

enum Gamemode {
	SURVIVAL
	CREATIVE
	ADVENTURE
	SPECTATOR
}
